/*
 * gradle build for house registration service.
 *
 */
buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'groovy'

repositories {
    maven {
        url "http://brepo.grindwise.com:8085/artifactory/grindwise"
    }

    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "com.gws.addressauthenticator:gws.addressauthenticator:${aaVersion}"
    compile "com.gws.productionenvy.framework:gws.productionenvy.framework:${productionEnvyVersion}"
    compile "com.gws.propertymgmt:propertymgmt:${propertyMgmtVersion}"
    compile "com.gws.propertymgmt:propertymgmt.house:${propertyMgmtHouseVersion}"
    compile "org.slf4j:slf4j-api:${slf4Version}"
    compile "io.dropwizard:dropwizard-core:${dropWizardVersion}"
    compile "io.dropwizard:dropwizard-views-mustache:${dropWizardVersion}"
    compile "io.dropwizard:dropwizard-assets:${dropWizardVersion}"
    compile "com.google.inject:guice:${guiceVersion}"
    compile "com.google.inject.extensions:guice-assistedinject:${guiceVersion}"
    compile "org.mockito:mockito-all:${mockitoVersion}"
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    //compile "org.jongo:jongo:${jongoVersion}"
    compile "org.mongodb:mongodb-driver:${mongoDriverVersion}"
    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "com.tngtech.jgiven:jgiven-junit:${jgivenVersion}"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

mainClassName = 'com.gws.propertymgmt.RegisterHouseService'

shadowJar {

    project.tasks.assemble.dependsOn project.tasks.shadowJar
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    classifier=null

    baseName = "${project.name}-${prjVersion}"
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    baseName = "${project.name}-${prjVersion}"
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("gw-checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source =''
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }    
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('checkstyle-simple.xsl')
    }
}