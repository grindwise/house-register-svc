/*
 * gradle build for house registration service.
 *
 */

plugins {
  id 'java'
  id "com.srcclr.gradle" version "3.1.0"
  id 'checkstyle'
  id "com.github.spotbugs" version "2.0.0"
  id 'maven'
  id 'maven-publish'
  id 'groovy'
  id "com.github.johnrengelman.shadow" version "5.0.0"
  id 'jacoco'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

repositories {
    maven {
        url myMavenRepoGwsReadUrl
    }

    jcenter()
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "com.gws.addressauthenticator:gws.addressauthenticator:${aaVersion}"
    compile "com.gws.productionenvy.framework:gws.productionenvy.framework:${productionEnvyVersion}"
    compile "org.slf4j:slf4j-api:${slf4Version}"
    compile "io.dropwizard:dropwizard-core:${dropWizardVersion}"
    compile "io.dropwizard:dropwizard-views-mustache:${dropWizardVersion}"
    compile "io.dropwizard:dropwizard-assets:${dropWizardVersion}"
    compile "io.dropwizard:dropwizard-json-logging:${dropWizardVersion}"
    compile "com.google.inject:guice:${guiceVersion}"
    compile "com.google.inject.extensions:guice-assistedinject:${guiceVersion}"
    compile "org.mockito:mockito-all:${mockitoVersion}"
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile "org.mongodb:mongodb-driver:${mongoDriverVersion}"
    compile 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    compile 'org.hidetake:gradle-ssh-plugin:2.9.0'

    checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "com.tngtech.jgiven:jgiven-junit:${jgivenVersion}"
}

sourceSets {
    solitaryTests {
        java.srcDir file('src/solitary/java')
	compileClasspath += main.output
	runtimeClasspath += main.output
    }
    
    unitTests {
        java.srcDir file('src/unit/java')
	compileClasspath += main.output
	runtimeClasspath += main.output
    }
    
    acceptanceTests {
        java.srcDir file('src/acceptance/java')
	compileClasspath += main.output
	runtimeClasspath += main.output
    }
}

configurations {
    solitaryTestsRuntimeClasspath.extendsFrom testImplementation
    solitaryTestsCompile.extendsFrom testCompile
    unitTestsRuntimeClasspath.extendsFrom testImplementation
    unitTestsCompile.extendsFrom testCompile
    acceptanceTestsRuntimeClasspath.extendsFrom testImplementation
    acceptanceTestsCompile.extendsFrom testImplementation
}

jacoco {
    toolVersion = "0.8.2"
}

task solitaryTests(type: Test) {
    description = 'run solitary tests - zero delegation/limited mocks.'
    group = 'developer verification'
    testClassesDirs = sourceSets.solitaryTests.output.classesDirs
    classpath = sourceSets.solitaryTests.runtimeClasspath
}

check.dependsOn solitaryTests

task unitTests(type: Test) {
    description = 'run unit tests - delegation/limited mocks'
    group = 'developer verification'
    testClassesDirs = sourceSets.unitTests.output.classesDirs
    classpath = sourceSets.unitTests.runtimeClasspath
}

check.dependsOn unitTests

task acceptanceTests(type: Test) {
    description = 'run acceptance tests - verify the produce owner is getting what he/she is paid for.'
    group = 'functional verification'
    testClassesDirs = sourceSets.acceptanceTests.output.classesDirs
    classpath = sourceSets.acceptanceTests.runtimeClasspath
}

task solitaryTestsJar(dependsOn: compileSolitaryTestsJava, type: Jar) {
    baseName = "${project.name}-sol"
    from sourceSets.solitaryTests.output.classesDirs
}

task unitTestsJar(dependsOn: compileUnitTestsJava, type: Jar) {
    baseName = "${project.name}-ut"
    from sourceSets.unitTests.output.classesDirs
}

task acceptanceTestsJar(dependsOn: compileAcceptanceTestsJava, type: Jar) {
    baseName = "${project.name}-at"
    from sourceSets.acceptanceTests.output.classesDirs
}

shadowJar {

    project.tasks.assemble.dependsOn project.tasks.shadowJar
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    classifier=null

    baseName = "${project.name}-${prjVersion}"
}

jar {

    manifest {
        attributes 'Main-Class': 'com.gws.propertymgmt.portfoliomgmt.RegisterHouseService' 
    }

    baseName = "${project.name}-${prjVersion}"
}

publishing {
    repositories {
        maven {
            url myMavenRepoGwsWriteUrl
            credentials {
                username System.getProperty("repoId")
                password System.getProperty("repoPassword")
            }
        }
    }
   
    publications {
        maven(MavenPublication) {
            groupId prjGroup
            artifactId prjArtifact
            version prjVersion
         
            artifact("$buildDir/libs/${prjArtifact}-${prjVersion}.jar")
        }
    }
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("gw-checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source =''
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }    
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('checkstyle-simple.xsl')
    }
}

task dockerCopy(type: Copy) {

    dockerCopy.configure {
       from('etc')
       into('docker/runtime_image')
       include('*')
    }

    dockerCopy.configure {
       from('build/libs')
       into('docker/runtime_image')
       include('*')
    }

    dockerCopy.configure {
       from('scripts')
       into('docker/runtime_image')
       include('*')
    }
}

// ssh deployment
/*
ssh.settings {
  dryRun = project.hasProperty('dryRun')
}

remotes {
  staging {
    host = 'propertyhoncho.hopto.org'
    port = 5767
    user = deployer_user
    password = deployer_password
  }
}

task deploy() {
  doLast {
    ssh.run {
      session(remotes.staging) {
        // Execute a command
        def result = execute 'sudo service apache2 status'

        // Also Groovy methods or properties are available in a session closure
        println result
      }
    }
  }
}

task smoke() {
    println("smoke testing")
}

srcclr {
  apiToken="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZWFtSWQiOiIxMjg2NyIsInNjb3BlIjpbXSwiaWQiOjMxMjA4LCJleHAiOjE1NDI0NjA4MjEsImF1dGhvcml0aWVzIjoiQUdFTlQiLCJvcmdJZCI6IjI0MjQiLCJqdGkiOiJjZDliZDE0Ny01NTMxLTRiMjYtOTYwZi05MGI1N2RjZjAyMDkiLCJjbGllbnRfaWQiOiIifQ.J88jaVRHk7EYl66jEOmZ1bUzLpun5rj99KA7f2Dcmz_B3PJyOwJCj6jO8UMxvPFTK3RV16WMWTt-9wRCGikuqplD6f0cVVqD8OERkubUaoVpeq6_omqS3az6exsEOHbeVcHEjbTlrHFhV-smYizu7Kzctkl24H0pTRd9ZVkfW64"
}

*/

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports.xml.enabled = false
  reports.html.enabled = true
}
